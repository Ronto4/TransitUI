@using Timetable
@using Timetable.Views
@Departure.Minute.ToString("00")<sub>@AnnotateDays(Departure.Days, DayMask)</sub>
@foreach (var annotation in Departure.Annotations)
{
    @if (annotation is Line.Trip.ManualAnnotation)
    {
        <sup class="border border-dark">@annotation.Symbol</sup>
    }
    else
    {
        <sup>@annotation.Symbol</sup>
    }
}

@code {
    [Parameter, EditorRequired] public required StopTimetableView.HourInfo.Departure Departure { get; init; }
    [Parameter, EditorRequired] public required StopTimetableView StopTimetableView { get; init; }

    /// <summary>
    /// Determines which days of operation are considered normal and will thus not create an annotation.
    /// </summary>
    [Parameter, EditorRequired]
    public required DaysOfOperation DayMask { get; init; }

    private static string AnnotateDays(DaysOfOperation days, DaysOfOperation mask) => (days & mask) == mask
        ? ""
        : (days & mask) switch
        {
            DaysOfOperation.Monday => "1",
            DaysOfOperation.Tuesday => "2",
            DaysOfOperation.Wednesday => "3",
            DaysOfOperation.Thursday => "4",
            DaysOfOperation.SchoolFriday when mask is DaysOfOperation.School => "5",
            DaysOfOperation.SchoolFriday => "5 (99)",
            DaysOfOperation.Friday => "5",
            DaysOfOperation.Saturday => "6",
            DaysOfOperation.Sunday => "7",
            DaysOfOperation.Monday | DaysOfOperation.Tuesday | DaysOfOperation.Wednesday | DaysOfOperation.Thursday => "14",
            DaysOfOperation.Weekday => "15",
            DaysOfOperation.Weekend => "67",
            DaysOfOperation.School => "99",
            DaysOfOperation.Holiday => "98",
            DaysOfOperation.School | DaysOfOperation.Weekend => "99 & 67",
            DaysOfOperation.Holiday | DaysOfOperation.Weekend => "98 & 67",
            DaysOfOperation.Friday | DaysOfOperation.Saturday => "56",
            DaysOfOperation.Monday | DaysOfOperation.Tuesday | DaysOfOperation.Wednesday | DaysOfOperation.Thursday | DaysOfOperation.Sunday => "74",
            DaysOfOperation.Weekday | DaysOfOperation.Saturday => "16",
            DaysOfOperation.Weekday | DaysOfOperation.Sunday => "75",
            _ when mask is DaysOfOperation.Holiday or DaysOfOperation.School => AnnotateDays(days, DaysOfOperation.Weekday),
            _ => throw new Exception($"Unhandled days {days} for mask {mask}.")
        };

    private static string PrintRouteIndex(int routeIndex, bool includeLeadingSpace = true) => $"{(includeLeadingSpace ? " " : "")}[{routeIndex + 1}]";
}

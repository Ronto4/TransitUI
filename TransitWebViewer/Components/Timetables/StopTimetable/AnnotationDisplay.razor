@using Timetable
@using Timetable.Views

<table class="table table-striped table-hover">
    <thead>
    <tr>
        <th scope="col"></th>
        <th scope="col">Anmerkungen</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var annotation in StopTimetableView.TripAnnotations)
    {
        <tr>
            @switch (annotation)
            {
                case Line.Trip.ManualAnnotation manualAnnotation:
                    <th scope="row" class="align-content-center"><span
                            class="border border-dark p-0 fw-normal">@manualAnnotation.Symbol</span></th>
                    <td class="text-start align-content-center">@manualAnnotation.Text</td>
                    break;
                case Line.Trip.ContinuesAnnotation continuesAnnotation:
                    <th scope="row" class="align-content-center"><span
                            class="p-0 fw-normal">@continuesAnnotation.Symbol</span></th>
                    <td class="text-start align-content-center">
                        <span>@ContinuesToAnnotationText(continuesAnnotation)</span>
                    </td>
                    break;
                case Line.Trip.OnlyToAnnotation onlyToAnnotation:
                {
                    <th scope="row" class="align-content-center"><span
                            class="p-0 fw-normal">@onlyToAnnotation.Symbol</span></th>
                    <td class="text-start align-content-center">
                        @if (onlyToAnnotation.DisplayRouteIndex == 0)
                        {
                            <span>nur bis @onlyToAnnotation.To.DisplayName</span>
                        }
                        else if (StopTimetableView.LastStopOfRoute(onlyToAnnotation.DisplayRouteIndex) == onlyToAnnotation.To)
                        {
                            <span>über Route [@(onlyToAnnotation.DisplayRouteIndex + 1)] nach @onlyToAnnotation.To.DisplayName</span>
                        }
                        else
                        {
                            <span>über Route [@(onlyToAnnotation.DisplayRouteIndex + 1)] nur bis @onlyToAnnotation.To.DisplayName</span>
                        }
                    </td>
                    break;
                }
                case Line.Trip.ContinuesFromToAnnotation continuesFromToAnnotation:
                    <th scope="row" class="align-content-center"><span
                            class="p-0 fw-normal">@continuesFromToAnnotation.Symbol</span></th>
                    <td class="text-start align-content-center">
                        @if (continuesFromToAnnotation.OnlyToAnnotation.DisplayRouteIndex == 0)
                        {
                            <span>ab @continuesFromToAnnotation.OnlyToAnnotation.To.DisplayName @ContinuesToAnnotationText(continuesFromToAnnotation.ContinuesAnnotation)</span>
                        }
                        else
                        {
                            <span>über Route [@(continuesFromToAnnotation.OnlyToAnnotation.DisplayRouteIndex + 1)] bis @continuesFromToAnnotation.OnlyToAnnotation.To.DisplayName und dann @ContinuesToAnnotationText(continuesFromToAnnotation.ContinuesAnnotation)</span>
                        }
                    </td>
                    break;
                default: throw new Exception($"Unknown annotation: {annotation}");
            }
        </tr>
    }
    <tr>
        <th scope="row" class="align-content-center"></th>
        <td class="text-start align-content-center">
            Erklärung der Verkehrstage:
            99&#8239;=&#8239;Schultage, 98&#8239;=&#8239;Ferientage.
            Alle anderen Ziffern stehen jeweils für einen Wochentag (1&#8239;=&#8239;Montag, &#x2026;, 7&#8239;=&#8239;Sonntag).
            Zwei Ziffern geben von&#x2026;bis an (z.&#8239;B. 74&#8239;=&#8239;Sonntag bis Donnerstag).
        </td>
    </tr>
    <tr>
        <th scope="row" class="align-content-center"></th>
        <td class="text-start align-content-center">
            @if (DaytimeOnly)
            {
                @DaytimeOnlyTimeAnnotation
            }
            else
            {
                @NotDaytimeOnlyTimeAnnotation
            }
        </td>
    </tr>
    </tbody>
</table>

@code {
    [Parameter] public required StopTimetableView StopTimetableView { get; init; }
    private bool? _daytimeOnly = null;
    private bool DaytimeOnly => _daytimeOnly ??= StopTimetableView.Lines.Select(line => line.OperationTime).Distinct().Single() /* mixing different lines is currently unsupported */ == LineOperationTime.Daytime;

    private const string DaytimeOnlyTimeAnnotation = "Fahrten bis 2 Uhr morgens sind dem vorherigen Kalendertag zugeordnet (z.\u00A0B. eine Fahrt um 1 Uhr nur freitags verkehrt am Samstag um 1 Uhr).";
    private const string NotDaytimeOnlyTimeAnnotation = "Fahrten sind immer dem tatsächlichen Kalendertag zugeordnet (z.\u00A0B. eine Fahrt um 1 Uhr nur freitags verkehrt am Freitag um 1 Uhr).";

    private string ContinuesToAnnotationText(Line.Trip.ContinuesAnnotation annotation) => $"{(annotation.Delay > TimeSpan.Zero ? $"nach {annotation.Delay.TotalMinutes} Minuten " : "")}weiter als Linie {annotation.As.Name}{(annotation.NotableViaStop is { } stop ? $" über {stop.DisplayName}" : "")} nach {annotation.To.DisplayName}{(annotation.Via.ManualAnnotation is { } manualAnnotation ? $" {manualAnnotation}" : "")}";
}

@using Timetable
@using TransitWebViewer.Utils
@implements ISelector<Stop?>
@inject NavigationManager Navigation

<button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
    @(SelectedStop is not null ? SelectedStop.FullName(ReferenceDate) : "Haltestelle")
</button>
<ul class="dropdown-menu">
    @foreach (var stop in PossibleStops)
    {
    <li><a class="dropdown-item" @onclick="_ => { SelectedStop = stop; EmitUpdate(); }">@stop.FullName(ReferenceDate)</a></li>
    }
</ul>

@code {

    [Parameter, EditorRequired] public required DateOnly ReferenceDate { get; init; }

    [Parameter, EditorRequired] public required IReadOnlyCollection<Line.Trip> SourceTrips { get; init; }
    [Parameter, EditorRequired] public required int? InitialStopIndex { get; set; }

    public enum Mode
    {
        /// Only consider stops that occur in all routes.
        IntersectRouteStops,

        /// Consider all stop that appear in any route.
        UnionRouteStops,
    }

    [Parameter, EditorRequired] public required Mode SelectionMode { get; init; }

    protected override void OnInitialized()
    {
        PossibleStops = GetPossibleStops(SourceTrips);
    }

    private bool _hasSetInitial = false;

    protected override void OnParametersSet()
    {
        if (_hasSetInitial) return;
        if (InitialStopIndex is { } initialStopIndex && initialStopIndex < PossibleStops.Count)
        {
            var newStop =  PossibleStops.ElementAt(initialStopIndex);
            if (newStop == SelectedStop) return;
            SelectedStop = newStop;
            EmitUpdate();
            _hasSetInitial = true;
        }
    }

    private IReadOnlyCollection<Stop> GetPossibleStops(IReadOnlyCollection<Line.Trip> trips)
        => SelectionMode is Mode.UnionRouteStops
            ? trips.SelectMany(trip => trip.Route.StopPositions.Select(pos => pos.Stop)).OrderBy(stop => stop.FullName(ReferenceDate)).Distinct().ToArray()
            : trips.Select(trip => trip.Route).Distinct().Select(route => route.StopPositions.Select(pos => pos.Stop).ToList()).Intersect().OrderBy(stop => stop.FullName(ReferenceDate)).ToArray();

    private IReadOnlyCollection<Stop> PossibleStops { get; set; } = null!; // Will be initialized above. */
    [Parameter, EditorRequired] public required Action<Stop?> OnUpdate { get; init; }

    private Stop? SelectedStop { get; set; } = null;

    public override Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<IReadOnlyCollection<Line.Trip>>(nameof(SourceTrips), out var trips))
        {
            PossibleStops = GetPossibleStops(trips);
            if (SelectedStop is not null && !PossibleStops.Contains(SelectedStop))
            {
                SelectedStop = null;
                // Strangely enough, this gets called *before* the initializers are run.
                // ReSharper disable once ConditionalAccessQualifierIsNonNullableAccordingToAPIContract
                OnUpdate?.Invoke(SelectedStop);
            }

            StateHasChanged();
        }

        return base.SetParametersAsync(parameters);
    }

    private void EmitUpdate()
    {
        OnUpdate(SelectedStop);
        var index = PossibleStops.Index().Single(tuple => tuple.Item == SelectedStop).Index;
        Navigation.NavigateTo(Navigation.GetUriWithQueryParameter("stop-index", index));
    }

}

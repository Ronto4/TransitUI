@using Timetable
@using Timetable.Views
@using TransitWebViewer.Utils

@if (Trips.Count == 0 || TimetableView.Trips.Count == 0)
{
    <strong>Es wurden noch keine Fahrten ausgewählt oder keine der gewählten Fahrten findet an den gewählten Tagen statt.</strong>
}
else
{
    <table class="table table-striped table-hover">
        <thead>
        <tr>
            <th scope="col">
                Haltestelle
            </th>
            @foreach (var trip in TimetableView.Trips)
            {
                <th scope="col" class="text-center">
                    @(trip.DaysOfOperation is { } daysOfOperation ? (daysOfOperation & Days).Display() : "")
                    @if (trip.AnnotationSymbols.Count > 0)
                    {
                        <hr/>
                    }
                    @foreach (var annotationSymbol in trip.AnnotationSymbols)
                    {
                        @annotationSymbol
                        @(" ")
                    }
                </th>
            }
        </tr>
        </thead>
        <tbody>
        @for (var i = 0; i < TimetableView.Stops.Count; ++i)
        {
            <tr>
                <th scope="row" class="align-content-center">@GetStopName(TimetableView.Stops.ElementAt(i))</th>
                @foreach (var trip in TimetableView.Trips)
                {
                    <td class="text-center align-content-center">@trip.ElementAt(i)</td>
                }
            </tr>
        }
        </tbody>
    </table>

    <ul class="list-group">
        @foreach (var annotation in TimetableView.ManualAnnotations)
        {
            <li class="list-group-item">
                @annotation.Symbol: @annotation.Text
            </li>
        }
    </ul>
}

@code {

    /// <summary>
    /// When this is <c>null</c>, the city name will always be printed.
    /// </summary>
    [Parameter, EditorRequired]
    public required City? ReferenceCity { get; init; }

    [Parameter, EditorRequired] public required DateOnly DayOfTimetable { get; init; }
    [Parameter, EditorRequired] public required IReadOnlyCollection<Line.Trip> Trips { get; init; }
    [Parameter, EditorRequired] public required DaysOfOperation Days { get; init; }
    [Parameter, EditorRequired] public required bool CollapseTrips { get; init; }

    private string GetStopName(Stop stop) => ReferenceCity is null ? stop.FullName(DayOfTimetable) : stop.DisplayName(DayOfTimetable, ReferenceCity);

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        // We need to reset the timetable view as it would not update automatically.
        // They are changing init-only properties after initialization...
        _timetableView = null;

        await base.SetParametersAsync(parameters);
    }

    private TimetableView? _timetableView = null;

    private TimetableView TimetableView => _timetableView ??= new TimetableView
    {
        SourceTrips = Trips,
        DaysOfOperation = Days,
        DoCollapseTrips = CollapseTrips,
        DayOfTimetable = DayOfTimetable,
    };

}

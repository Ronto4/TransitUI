@page "/vip/dotmatrix"
@using RealTimeDataCrawler.Vip
@implements IDisposable
@inject NavigationManager NavigationManager

<PageTitle>Ronto4 - Transit - ViP</PageTitle>

<h3>ViP &ndash; Anzeigen</h3>

@code
{
    const string BaseRequestUrl = @"%HOST%api/vip/%STOP_ID%/json";
    string RequestUrl => BaseRequestUrl.Replace("%HOST%", NavigationManager.BaseUri);
    const string BaseApiUrl = @"%HOST%api/vip/%STOP_ID%/dotmatrix/%PAGE_ID%";
    string ApiUrl => BaseApiUrl.Replace("%HOST%", NavigationManager.BaseUri);
    static string ImageSource { get; set; } = "";

    private Timer? Timer { get; set; } = null;

    void RefreshDotMatrix()
    {
        ImageSource = ApiUrl.Replace("%STOP_ID%", StopId.ToString()).Replace("%PAGE_ID%", PageId.ToString());
        // Add current time as request parameter to force reloading image.
        ImageSource += $"?time={DateTime.UtcNow.Ticks}";
        StateHasChanged();
    }

    async Task UpdateNextStopId(ChangeEventArgs e)
    {
        NextStopId = e.Value?.ToString() ?? NextStopId;
        try
        {
            var station = await Crawler.GetFromWeb(int.Parse(NextStopId), RequestUrl, new CancellationToken());
            NextStopName = station.StationName;
            SubmissionPossible = true;
        }
        catch (HttpRequestException)
        {
            NextStopName = "ID nicht gefunden!";
            SubmissionPossible = false;
        }
        StateHasChanged();
    }

    private int StopId { get; set; } = 0;
    private string NextStopId { get; set; } = string.Empty;
    private string NextStopName { get; set; } = string.Empty;
    private bool SubmissionPossible { get; set; } = true;
    private int PageId { get; set; } = 1;
    private int PageCount { get; set; } = 0;

    async Task StopStep() => await StopStep(null);

    async Task<bool> UpdatePageCount(CancellationToken? cancellationToken = null)
    {
        cancellationToken ??= new CancellationToken();

        var pageCountUrl = ApiUrl.Replace("%STOP_ID%", StopId.ToString()).Replace("%PAGE_ID%", "info");
        var pageCountString = await DownloadString(pageCountUrl, cancellationToken.Value);
        if (pageCountString is null)
        {
            return false;
        }
        PageCount = int.Parse(pageCountString);
        return true;

        // Source: https://stackoverflow.com/a/76582825
        static async Task<string?> DownloadString(string url, CancellationToken cancellationToken)
        {
            HttpClient httpClient = new();
            try
            {
                var content = await httpClient.GetStringAsync(url, cancellationToken);
                return content;
            }
            catch (HttpRequestException)
            {
                return null;
            }
        }
    }

    async Task StopStep(CancellationToken? cancellationToken)
    {
        cancellationToken ??= new CancellationToken();
        while (true)
        {
            StopId++;
            var success = await UpdatePageCount(cancellationToken);
            if (!success)
            {
                continue;
            }
            PageId = 1;
            RefreshDotMatrix();
            return;
        }
    }

    async Task UpdateStop(CancellationToken cancellationToken)
    {
        StopId = int.Parse(NextStopId);
        await UpdatePageCount(cancellationToken);
        PageId = 1;
        RefreshDotMatrix();
    }

    async Task PageStep()
    {
        await UpdatePageCount();
        PageId++;
        if (PageId > PageCount)
        {
            PageId = 1;
        }
        // Always toggle refresh to force reloading even if page didn't change.
        RefreshDotMatrix();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        StartPageStepping();
        Task.Run(StopStep);
    }

    private void StartPageStepping()
    {
        Timer = new Timer(_ => Task.Run(PageStep), null, TimeSpan.Zero, TimeSpan.FromSeconds(5));
    }

    private void UpdateStopStepping(ChangeEventArgs e)
    {
        if (e.Value is not bool stopStepping)
        {
            Console.Error.WriteLine($"Invalid call to {nameof(UpdateStopStepping)} with {e.Value}.");
            return;
        }

        if (stopStepping)
        {
            Timer?.Dispose();
        }
        else
        {
            StartPageStepping();
        }
    }

    public void Dispose()
    {
        Timer?.Dispose();
    }
}

<div class="container-fluid text-center">
    
    <div class="row">
        
        <div class="col-sm-4">
            <div class="input-group mb-3">
                <span class="input-group-text">Haltestellen-ID</span>
                <input type="number" class="form-control" min="1" max="1000"  @oninput="UpdateNextStopId" />
            </div>
            <div class="input-group mb-3">
                <span class="input-group-text">Haltestellenname</span>
                <input type="text" class="form-control" value="@NextStopName" disabled />
            </div>
            <div class="form-check">
              <input class="form-check-input" type="checkbox" @oninput="UpdateStopStepping" id="flexCheckDefault">
              <label class="form-check-label" for="flexCheckDefault">
                Update anhalten
              </label>
            </div>
            <div class="input-group mb-3">
                <button type="submit" class="btn btn-primary" @onclick="() => UpdateStop(new CancellationToken())" disabled="@(!SubmissionPossible)">Einstellungen anwenden</button>
            </div>

        </div>

        <div class="col-sm-4">

            <img src="@ImageSource" alt="Abfahrtstafel" class="img-fluid" />

        </div>

    </div>

</div>

@page "/vip/timetable"
@using Timetables
@using Timetables.Models
@using Timetables.Vip

<h3>ViP - Fahrpläne</h3>

@code
{
    private static string TranslateDays(DaysOfOperation days) => TranslateDays(days.ToString());

    private static string TranslateDays(string days) => days.Contains(", ")
        ? string.Join(", ", days.Split(", ").Select(TranslateDays))
        : days switch
        {
            nameof(DaysOfOperation.Monday) => "Mo",
            nameof(DaysOfOperation.Tuesday) => "Di",
            nameof(DaysOfOperation.Wednesday) => "Mi",
            nameof(DaysOfOperation.Thursday) => "Do",
            nameof(DaysOfOperation.Friday) => "Fr",
            nameof(DaysOfOperation.Saturday) => "Sa",
            nameof(DaysOfOperation.Sunday) => "So",
            nameof(DaysOfOperation.School) => "Schule",
            nameof(DaysOfOperation.Holiday) => "Ferien",
            nameof(DaysOfOperation.Weekday) => "Mo–Fr",
            nameof(DaysOfOperation.Weekend) => "Sa–So",
            nameof(DaysOfOperation.Daily) => "täglich",
            _ => days,
        };

    private static bool ShowDays(DaysOfOperation days) => ((DaysOfOperation[])
    [
        DaysOfOperation.Monday,
        DaysOfOperation.Tuesday,
        DaysOfOperation.Wednesday,
        DaysOfOperation.Thursday,
        DaysOfOperation.Friday,
        DaysOfOperation.Saturday,
        DaysOfOperation.Sunday,
        DaysOfOperation.School,
        DaysOfOperation.Holiday,
        DaysOfOperation.Weekday,
        DaysOfOperation.Weekend,
        DaysOfOperation.Daily,
    ]).Contains(days);
    private static IHistoryEntry? _historyEntry = null;
    private static IHistoryEntry? HistoryEntry
    {
        get => _historyEntry;
        set
        {
            _historyEntry = value;
            Line = null;
        }
    }

    private static Line? _line = null;
    private static Line? Line
    {
        get => _line;
        set
        {
            _line = value;
            Routes = [];
        }
    }

    private static List<Line.Route> Routes { get; set; } = []; 

    // private static Line.Route? _route = null;
    // private static Line.Route? Route
    // {
    //     get => _route;
    //     set
    //     {
    //         _route = value;
    //     }
    // }

    private static DaysOfOperation Days { get; set; } = DaysOfOperation.Daily;

    private static IList<Line.Trip>? Trips => Line?.Trips.Where(trip => Routes.Contains(trip.Route) && (trip.DaysOfOperation & Days) != DaysOfOperation.None).ToList();

    private static IEnumerable<Line.Trip> CleanTrips(IEnumerable<Line.Trip> trips)
    {
        // Sort. Consider every start of a trip until 01:15 LOC as belonging to the previous day.
        var sortedTrips = trips
            .Select(trip => (trip, trip.StartTime - new TimeOnly(1, 15)))
            .OrderBy(trip => trip.Item2)
            .Select(trip => trip.trip)
            .ToList();
        // Eliminate identical trips.
        for (var i = 0; i < sortedTrips.Count; ++i)
        {
            var trip = sortedTrips[i];
            var daysOfIdenticalTrips = sortedTrips
                .Select((other, index) => (other, index))
                .Skip(i + 1)
                .Where(other => trip.StartTime == other.other.StartTime && trip.TimeProfile == other.other.TimeProfile)
                .Select(other => (other.other.DaysOfOperation, other.index))
                .ToList();
            var days = daysOfIdenticalTrips.Aggregate(trip.DaysOfOperation, (current, day) => current | day.DaysOfOperation);
            yield return trip with { DaysOfOperation = days };
            // Remove duplicate entries
            for (var j = 0; j < daysOfIdenticalTrips.Count; ++j)
            {
                sortedTrips.RemoveAt(daysOfIdenticalTrips[j].index - j);
            }
        }
    }
    
    private static TimetableView TimetableView { get; set; }

    private static string SetTimetableView(ICollection<Line.Trip> trips)
    {
        TimetableView = new TimetableView
        {
            SourceTrips = trips,
        };
        return string.Empty;
    }
}

<div class="button-group">
    @* <div class="dropdown"> *@
    <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
        @(HistoryEntry is null ? "Fahrplanperiode" : $"ab {HistoryEntry.EffectiveDate}")
    </button>
    <ul class="dropdown-menu">
        @foreach (var historyEntry in VipHistory.History)
        {
            <li><a class="dropdown-item" @onclick="_ => HistoryEntry = historyEntry">ab @historyEntry.EffectiveDate</a></li>
        }
    </ul>
    @* </div> *@

    @if (HistoryEntry is not null)
    {
        @* <div class="dropdown"> *@
        <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            @(Line is null ? "Linie" : Line.Name)
        </button>
        <ul class="dropdown-menu">
            @foreach (var line in HistoryEntry.OrderedLinesById.Select(entry => entry.Value))
            {
                <li><a class="dropdown-item" @onclick="_ => Line = line">@line.Name</a></li>
            }
        </ul>
        // </div>
    }

    @* @if (Line is not null) *@
    @* { *@
    @*     $1$ $2$ <div class="dropdown"> #2# #1# *@
    @*     $1$     <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false"> #1# *@
    @*     $1$         @(Route is null ? "Route" : Route) #1# *@
    @*     $1$     </button> #1# *@
    @*     $1$     <ul class="dropdown-menu"> #1# *@
    @*     $1$         @foreach (var route in Line.Routes) #1# *@
    @*     $1$         { #1# *@
    @*     $1$             <li><a class="dropdown-item" @onclick="_ => Route = route">@route</a></li> #1# *@
    @*     $1$         } #1# *@
    @*     $1$     </ul> #1# *@
    @*     $1$ // </div> #1# *@
    @* } *@

    @* <div class="dropdown"> *@
    <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
        @TranslateDays(Days)
    </button>
    <ul class="dropdown-menu">
        @foreach (var days in Enum.GetValues(typeof(DaysOfOperation)).Cast<DaysOfOperation>().Where(ShowDays))
        {
            <li><a class="dropdown-item" @onclick="_ => Days = days">@TranslateDays(days)</a></li>
        }
    </ul>
    @* </div> *@
</div>

@if (Line is not null)
{
    @foreach (var route in Line.Routes)
    {
        <div class="form-check-inline">
            <input class="form-check-input" type="checkbox" value="" id="@route.GetHashCode()" @onchange="e => { if (e.Value is true) Routes.Add(route); else Routes.Remove(route); }">
            <label class="form-check-label" for="@route.GetHashCode()">
                @route
            </label>
        </div>
    }
    @* $1$ <div class="dropdown"> #1# *@
    @*     <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false"> *@
    @*         @(Route is null ? "Route" : Route) *@
    @*     </button> *@
    @*     <ul class="dropdown-menu"> *@
    @*         @foreach (var route in Line.Routes) *@
    @*         { *@
    @*             <li><a class="dropdown-item" @onclick="_ => Route = route">@route</a></li> *@
    @*         } *@
    @*     </ul> *@
    @* // </div> *@
}

<hr/>

@if (Trips is not null && Line is not null)
{
    @SetTimetableView(Trips)
    <table class="table table-striped table-hover">
        <thead>
        <tr>
            <th scope="col">
                Haltestelle
            </th>
            @foreach (var trip in TimetableView.Trips)
            {
                <th scope="col">
                    @TranslateDays(trip.DaysOfOperation)
                </th>
            }
            @* @foreach (var trip in CleanTrips(Trips)) *@
            @* { *@
            @*     <th scope="col"> *@
            @*         @TranslateDays(trip.DaysOfOperation) *@
            @*         $1$     Fahrt @i #1# *@
            @*     </th> *@
            @* } *@
        </tr>
        </thead>
        <tbody>
        @for (var i = 0; i < TimetableView.Stops.Count; ++i)
        {
            <tr>
                <th scope="row">@TimetableView.Stops.ElementAt(i).DisplayName</th>
                @foreach (var trip in TimetableView.Trips)
                {
                    <td>@trip.Times.ElementAt(i)</td>
                }
            </tr>
        }
        @* @foreach (var route in Routes) *@
        @* { *@
        @*     @for (var i = 0; i < route.StopPositions.Length; ++i) *@
        @*     { *@
        @*         <tr> *@
        @*             <th scope="row">@route.StopPositions[i].Stop.DisplayName</th> *@
        @*             @foreach (var t in CleanTrips(Trips)) *@
        @*             { *@
        @*                 <td> *@
        @*                     @if (t.Route == route) *@
        @*                     { *@
        @*                         @t.TimeAtStop(i) *@
        @*                     } *@
        @*                 </td> *@
        @*             } *@
        @*         </tr> *@
        @*     } *@
        @* } *@
        </tbody>
    </table>
}

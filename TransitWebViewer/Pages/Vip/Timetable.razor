@page "/vip/timetable"
@using Timetables
@using Timetables.Models
@using Timetables.Vip

<h3>ViP - Fahrpläne</h3>

@code
{
    private static string TranslateDays(DaysOfOperation days) => TranslateDays(days.ToString());

    private static string TranslateDays(string days) => days.Contains(", ")
        ? string.Join(", ", days.Split(", ").Select(TranslateDays))
        : days switch
        {
            nameof(DaysOfOperation.Monday) => "Mo",
            nameof(DaysOfOperation.SchoolMonday) => "Mo (Schule)",
            nameof(DaysOfOperation.HolidayMonday) => "Mo (Ferien)",
            nameof(DaysOfOperation.Tuesday) => "Di",
            nameof(DaysOfOperation.SchoolTuesday) => "Di (Schule)",
            nameof(DaysOfOperation.HolidayTuesday) => "Di (Ferien)",
            nameof(DaysOfOperation.Wednesday) => "Mi",
            nameof(DaysOfOperation.SchoolWednesday) => "Mi (Schule)",
            nameof(DaysOfOperation.HolidayWednesday) => "Mi (Ferien)",
            nameof(DaysOfOperation.Thursday) => "Do",
            nameof(DaysOfOperation.SchoolThursday) => "Do (Schule)",
            nameof(DaysOfOperation.HolidayThursday) => "Do (Ferien)",
            nameof(DaysOfOperation.Friday) => "Fr",
            nameof(DaysOfOperation.SchoolFriday) => "Fr (Schule)",
            nameof(DaysOfOperation.HolidayFriday) => "Fr (Ferien)",
            nameof(DaysOfOperation.Saturday) => "Sa",
            nameof(DaysOfOperation.Sunday) => "So",
            nameof(DaysOfOperation.School) => "Schule",
            nameof(DaysOfOperation.Holiday) => "Ferien",
            nameof(DaysOfOperation.Weekday) => "Mo–Fr",
            nameof(DaysOfOperation.Weekend) => "Sa–So",
            nameof(DaysOfOperation.Daily) => "täglich",
            _ => days,
        };

    private static bool ShowDays(DaysOfOperation days) => ((DaysOfOperation[])
    [
        DaysOfOperation.Monday,
        DaysOfOperation.Tuesday,
        DaysOfOperation.Wednesday,
        DaysOfOperation.Thursday,
        DaysOfOperation.Friday,
        DaysOfOperation.Saturday,
        DaysOfOperation.Sunday,
        DaysOfOperation.School,
        DaysOfOperation.Holiday,
        DaysOfOperation.Weekday,
        DaysOfOperation.Weekend,
        DaysOfOperation.Daily,
    ]).Contains(days);
    private static IHistoryEntry? _historyEntry = null;
    private static IHistoryEntry? HistoryEntry
    {
        get => _historyEntry;
        set
        {
            _historyEntry = value;
            Line = null;
        }
    }

    private static Line? _line = null;
    private static Line? Line
    {
        get => _line;
        set
        {
            _line = value;
            Routes = [];
        }
    }

    private static List<Line.Route> Routes { get; set; } = [];

    private static DaysOfOperation Days { get; set; } = DaysOfOperation.Daily;

    private static IList<Line.Trip>? Trips => Line?.Trips.Where(trip => Routes.Contains(trip.Route) && (trip.DaysOfOperation & Days) != DaysOfOperation.None).ToList();

    private static TimetableView TimetableView { get; set; } = null!; /* Will be set later on. */

    private static string SetTimetableView(ICollection<Line.Trip> trips)
    {
        TimetableView = new TimetableView
        {
            SourceTrips = trips,
        };
        return string.Empty;
    }
}

<div class="button-group">
    <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
        @(HistoryEntry is null ? "Fahrplanperiode" : $"ab {HistoryEntry.EffectiveDate}")
    </button>
    <ul class="dropdown-menu">
        @foreach (var historyEntry in VipHistory.History)
        {
            <li><a class="dropdown-item" @onclick="_ => HistoryEntry = historyEntry">ab @historyEntry.EffectiveDate</a></li>
        }
    </ul>

    @if (HistoryEntry is not null)
    {
        <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            @(Line is null ? "Linie" : Line.Name)
        </button>
        <ul class="dropdown-menu">
            @foreach (var line in HistoryEntry.OrderedLinesById.Select(entry => entry.Value))
            {
                <li><a class="dropdown-item" @onclick="_ => Line = line">@line.Name</a></li>
            }
        </ul>
    }
    <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
        @TranslateDays(Days)
    </button>
    <ul class="dropdown-menu">
        @foreach (var days in Enum.GetValues(typeof(DaysOfOperation)).Cast<DaysOfOperation>().Where(ShowDays))
        {
            <li><a class="dropdown-item" @onclick="_ => Days = days">@TranslateDays(days)</a></li>
        }
    </ul>
</div>

@if (Line is not null)
{
    @foreach (var route in Line.Routes)
    {
        <div class="form-check-inline">
            <input class="form-check-input" type="checkbox" value="" id="@route.GetHashCode()" @onchange="e => { if (e.Value is true) Routes.Add(route); else Routes.Remove(route); }">
            <label class="form-check-label" for="@route.GetHashCode()">
                @route
            </label>
        </div>
    }
}

<hr/>

@if (Trips is not null && Line is not null)
{
    @SetTimetableView(Trips)
    <table class="table table-striped table-hover">
        <thead>
        <tr>
            <th scope="col">
                Haltestelle
            </th>
            @foreach (var trip in TimetableView.Trips)
            {
                <th scope="col" class="text-center">
                    @TranslateDays(trip.DaysOfOperation)
                </th>
            }
        </tr>
        </thead>
        <tbody>
        @for (var i = 0; i < TimetableView.Stops.Count; ++i)
        {
            <tr>
                <th scope="row">@TimetableView.Stops.ElementAt(i).DisplayName</th>
                @foreach (var trip in TimetableView.Trips)
                {
                    <td class="text-center">@trip.Times.ElementAt(i)</td>
                }
            </tr>
        }
        </tbody>
    </table>
}
